package com.example.blog.util;

import lombok.Getter;

import java.util.Arrays;
import java.util.List;

@Getter
public class GenerateContent {

    public static List<String> contentList = Arrays.asList(
            "<figure>\n" +
                    "  <div tabindex=\"0\" role=\"button\">\n" +
                    "    <div>\n" +
                    "      <picture><img style=\"width: 680px; height: auto;\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:875/1*X2H57CqL3bVH1Pc17HCtHg.jpeg\" alt=\"\" width=\"700\" height=\"347\" loading=\"eager\"></picture>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</figure>\n" +
                    "<p id=\"1016\" data-selectable-paragraph=\"\">Structuring API responses is a critical part of building a robust and user-friendly Spring Boot application. A well-structured response not only makes your APIs easier to consume but also simplifies debugging and integration. In this blog post, we&rsquo;ll explore the best practices and patterns for structuring API responses in Spring Boot, complete with code examples.</p>\n" +
                    "<h1 id=\"0009\" data-selectable-paragraph=\"\">Why API Response Structure Matters</h1>\n" +
                    "<p id=\"a15a\" data-selectable-paragraph=\"\">When consuming an API, developers expect a consistent and clear structure. A good API response should:</p>\n" +
                    "<ol style=\"list-style-type: none;\">\n" +
                    "  <li id=\"e8aa\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Be&nbsp;<strong>predictable</strong>: Use the same format for success and error responses.</li>\n" +
                    "  <li id=\"59eb\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Be&nbsp;<strong>informative</strong>: Provide relevant data and metadata.</li>\n" +
                    "  <li id=\"8dc1\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Be&nbsp;<strong>descriptive</strong>: Clearly indicate the status of the request.</li>\n" +
                    "  <li id=\"8bd7\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Be&nbsp;<strong>simple</strong>: Avoid unnecessary complexity.</li>\n" +
                    "</ol>\n" +
                    "<p id=\"8dc7\" data-selectable-paragraph=\"\">By following these principles, you can make your APIs more developer-friendly and maintainable.</p>\n" +
                    "<h1 id=\"aad1\" data-selectable-paragraph=\"\">Standardizing API Responses</h1>\n" +
                    "<p id=\"c2cf\" data-selectable-paragraph=\"\">A common way to standardize API responses is by wrapping the data in a response object. This object can include:</p>\n" +
                    "<ul style=\"list-style-type: none;\">\n" +
                    "  <li id=\"e865\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\"><strong>Status</strong>: HTTP status codes (e.g., 200, 404).</li>\n" +
                    "  <li id=\"88b2\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\"><strong>Message</strong>: A short description of the outcome.</li>\n" +
                    "  <li id=\"84c6\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\"><strong>Data</strong>: The actual payload (can be null for error cases).</li>\n" +
                    "  <li id=\"778f\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\"><strong>Metadata</strong>: Optional information like pagination details.</li>\n" +
                    "</ul>\n" +
                    "<p id=\"0c8f\" data-selectable-paragraph=\"\">Here&rsquo;s an example of a standard response structure in JSON format:</p>\n" +
                    "<pre><span id=\"cf51\" data-selectable-paragraph=\"\">{<br>  \"status\": \"success\",<br>  \"message\": \"Data retrieved successfully\",<br>  \"data\": {<br>    \"id\": 1,<br>    \"name\": \"Dulanjaya Sandaruwan\"<br>  },<br>  \"metadata\": {<br>    \"page\": 1,<br>    \"size\": 10,<br>    \"total\": 100<br>  }<br>}</span></pre>\n" +
                    "<h1 id=\"b56c\" data-selectable-paragraph=\"\">Creating a Generic API Response Class</h1>\n" +
                    "<p id=\"29c2\" data-selectable-paragraph=\"\">In Spring Boot, you can define a generic&nbsp;<code>ApiResponse</code>&nbsp;class to standardize responses:</p>\n" +
                    "<pre><span id=\"4d31\" data-selectable-paragraph=\"\">public class ApiResponse&lt;T&gt; {<br>    private String status;<br>    private String message;<br>    private T data;<br>    private Object metadata;<br><br>    public ApiResponse(String status, String message, T data, Object metadata) {<br>        this.status = status;<br>        this.message = message;<br>        this.data = data;<br>        this.metadata = metadata;<br>    }<br><br>    // Getters and setters omitted for brevity<br>}</span></pre>\n" +
                    "<h1 id=\"3511\" data-selectable-paragraph=\"\">Handling Success Responses</h1>\n" +
                    "<p id=\"25c1\" data-selectable-paragraph=\"\">You can use the&nbsp;<code>ApiResponse</code>&nbsp;class to wrap successful responses. For example:</p>\n" +
                    "<pre><span id=\"e528\" data-selectable-paragraph=\"\">@RestController<br>@RequestMapping(\"/api/users\")<br>public class UserController {<br><br>    @GetMapping(\"/{id}\")<br>    public ResponseEntity&lt;ApiResponse&lt;User&gt;&gt; getUserById(@PathVariable Long id) {<br>        User user = userService.findById(id);<br>        ApiResponse&lt;User&gt; response = new ApiResponse&lt;&gt;(<br>                \"success\",<br>                \"User retrieved successfully\",<br>                user,<br>                null<br>        );<br>        return ResponseEntity.ok(response);<br>    }<br>}</span></pre>\n" +
                    "<p id=\"b815\" data-selectable-paragraph=\"\">This ensures that every successful response follows a consistent format.</p>\n" +
                    "<h1 id=\"2412\" data-selectable-paragraph=\"\">Handling Error Responses</h1>\n" +
                    "<p id=\"06f6\" data-selectable-paragraph=\"\">For error handling, you can extend the same&nbsp;<code>ApiResponse</code>&nbsp;class to include error-specific details:</p>\n" +
                    "<pre><span id=\"f5d7\" data-selectable-paragraph=\"\">@RestControllerAdvice<br>public class GlobalExceptionHandler {<br><br>    @ExceptionHandler(ResourceNotFoundException.class)<br>    public ResponseEntity&lt;ApiResponse&lt;Object&gt;&gt; handleResourceNotFound(ResourceNotFoundException ex) {<br>        ApiResponse&lt;Object&gt; response = new ApiResponse&lt;&gt;(<br>                \"error\",<br>                ex.getMessage(),<br>                null,<br>                null<br>        );<br>        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);<br>    }<br>}</span></pre>\n" +
                    "<p id=\"d5cb\" data-selectable-paragraph=\"\">Using a global exception handler ensures that error responses are standardized across your application.</p>\n" +
                    "<h1 id=\"adf5\" data-selectable-paragraph=\"\">Including Metadata for Pagination</h1>\n" +
                    "<p id=\"cbc2\" data-selectable-paragraph=\"\">When returning paginated results, include metadata such as the current page, total pages, and total records. Here&rsquo;s an example of how to include metadata:</p>\n" +
                    "<pre><span id=\"5fa8\" data-selectable-paragraph=\"\">@GetMapping<br>public ResponseEntity&lt;ApiResponse&lt;List&lt;User&gt;&gt;&gt; getAllUsers(<br>        @RequestParam int page,<br>        @RequestParam int size) {<br>    Page&lt;User&gt; userPage = userService.findAll(PageRequest.of(page, size));<br><br>    ApiResponse&lt;List&lt;User&gt;&gt; response = new ApiResponse&lt;&gt;(<br>            \"success\",<br>            \"Users retrieved successfully\",<br>            userPage.getContent(),<br>            Map.of(<br>                    \"currentPage\", userPage.getNumber(),<br>                    \"totalPages\", userPage.getTotalPages(),<br>                    \"totalItems\", userPage.getTotalElements()<br>            )<br>    );<br><br>    return ResponseEntity.ok(response);<br>}</span></pre>\n" +
                    "<h1 id=\"9e9a\" data-selectable-paragraph=\"\">Using a Utility Class for Responses</h1>\n" +
                    "<p id=\"e5fc\" data-selectable-paragraph=\"\">To avoid repetitive code, you can create a utility class for generating responses:</p>\n" +
                    "<pre><span id=\"4ca7\" data-selectable-paragraph=\"\">public class ResponseUtil {<br><br>    public static &lt;T&gt; ApiResponse&lt;T&gt; success(String message, T data, Object metadata) {<br>        return new ApiResponse&lt;&gt;(\"success\", message, data, metadata);<br>    }<br><br>    public static &lt;T&gt; ApiResponse&lt;T&gt; error(String message, T data) {<br>        return new ApiResponse&lt;&gt;(\"error\", message, data, null);<br>    }<br>}</span></pre>\n" +
                    "<p id=\"9e48\" data-selectable-paragraph=\"\">And use it in your controllers:</p>\n" +
                    "<pre><span id=\"349d\" data-selectable-paragraph=\"\">@GetMapping(\"/{id}\")<br>public ResponseEntity&lt;ApiResponse&lt;User&gt;&gt; getUserById(@PathVariable Long id) {<br>    User user = userService.findById(id);<br>    return ResponseEntity.ok(ResponseUtil.success(\"User retrieved successfully\", user, null));<br>}</span></pre>\n" +
                    "<h1 id=\"db16\" data-selectable-paragraph=\"\">Benefits of Structured API Responses</h1>\n" +
                    "<ol style=\"list-style-type: none;\">\n" +
                    "  <li id=\"bced\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Consistency</strong>: Every response follows a predictable format.</li>\n" +
                    "  <li id=\"bc74\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Debugging</strong>: Easier to understand and troubleshoot issues.</li>\n" +
                    "  <li id=\"4a15\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Ease of Integration</strong>: Consumers of your API can handle responses more effectively.</li>\n" +
                    "  <li id=\"466e\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Reusability</strong>: Generic response wrappers reduce boilerplate code.</li>\n" +
                    "</ol>\n" +
                    "<h1 id=\"060c\" data-selectable-paragraph=\"\">Summary</h1>\n" +
                    "<p id=\"5759\" data-selectable-paragraph=\"\">A well-structured API response can dramatically improve the usability and maintainability of your Spring Boot applications. By adopting a standard format, leveraging generic response wrappers, and using utility classes, you can build APIs that are a delight to use.</p>\n" +
                    "<p id=\"80a4\" data-selectable-paragraph=\"\">Let me know your thoughts or share your preferred response structures in the comments below!</p>\n" +
                    "<p id=\"48ab\" data-selectable-paragraph=\"\">Happy coding!&nbsp;</p>",

            "<p id=\"652e\" data-selectable-paragraph=\"\">In the world of Spring Boot development, we often find ourselves caught in the tedious cycle of creating Data Transfer Objects (DTOs) and manually mapping them to and from our domain entities. This process, while common, can lead to bloated codebases, increased maintenance overhead, and potential inconsistencies.</p>\n" +
                    "<h1 id=\"b26a\" data-selectable-paragraph=\"\">The Problem with Traditional DTOs</h1>\n" +
                    "<p id=\"1e9d\" data-selectable-paragraph=\"\">Traditionally, when we want to expose only certain fields of an entity through our API, we create a DTO class, then manually map the entity to this DTO. This often looks something like this, where we need to create a mapping function between the entity and DTO:</p>\n" +
                    "<pre><span id=\"b2b4\" data-selectable-paragraph=\"\"><br>@Entity<br>class User(<br>    @Id @GeneratedValue<br>    val id: Long = 0,<br>    val username: String, <br>    val email: String<br>)<br><br>data class UserDTO(val username: String, val email: String)<br><br>fun User.fromPost() = UserDTO(username, email)</span></pre>\n" +
                    "<p id=\"ed32\" data-selectable-paragraph=\"\">Let&rsquo;s create a more complex example with a one-to-many relationship between&nbsp;<code>Department</code>&nbsp;and&nbsp;<code>Employee</code>&nbsp;entities. We'll demonstrate how projections can help prevent N+1 query problems, and reduce memory usage when fetching data.</p>\n" +
                    "<p id=\"b52c\" data-selectable-paragraph=\"\">First, let&rsquo;s define our entities:</p>\n" +
                    "<pre><span id=\"bf33\" data-selectable-paragraph=\"\">@Entity<br>data class Department(<br>    @Id @GeneratedValue<br>    val id: Long = 0,<br>    val name: String,<br>    <br>    @OneToMany(<br>        mappedBy = \"department\", <br>        cascade = [CascadeType.ALL], <br>        orphanRemoval = true, <br>        fetch = FetchType.LAZY<br>    )<br>    val employees: List&lt;Employee&gt; = mutableListOf()<br>)<br><br>@Entity<br>data class Employee(<br>    @Id @GeneratedValue<br>    val id: Long = 0,<br>    val name: String,<br>    val email: String,<br>    <br>    @ManyToOne(fetch = FetchType.LAZY)<br>    @JoinColumn(name = \"department_id\")<br>    val department: Department<br>)</span></pre>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"2ce2\" data-selectable-paragraph=\"\">If we try to return the entities from a REST API controller, the API would return a string (not JSON) because of a recursive serialization issue. The Employee entity has a reference to the Department entity, which in turn has a list of Employee entities, creating a circular reference. This causes the serialization process to enter an infinite loop. We would need to annotate&nbsp;<code>department</code>&nbsp;with&nbsp;<code>@JsonBackReference</code>&nbsp;annotation. But putting JSON annotations to entities will make them even more complex files to maintain.</p>\n" +
                    "</blockquote>\n" +
                    "<p id=\"aa3a\" data-selectable-paragraph=\"\">Now this is what we do in the world of DTOs to avoid returning entities from our REST APIs:</p>\n" +
                    "<pre><span id=\"d36c\" data-selectable-paragraph=\"\">data class DepartmentDTO(<br>    val id: Long,<br>    val name: String,<br>    val employeeCount: Int,<br>    val averageSalary: Double<br>)<br><br>@Repository<br>interface DepartmentRepository : JpaRepository&lt;Department, Long&gt;<br><br>@Service<br>class DepartmentService(private val departmentRepository: DepartmentRepository) {<br>    fun getAllDepartmentSummaries(): List&lt;DepartmentDTO&gt; {<br>        return departmentRepository.findAll().map { department -&gt;<br>            DepartmentDTO(<br>                id = department.id,<br>                name = department.name,<br>                employeeCount = department.employees.size,<br>                averageSalary = department.employees.map { it.salary }.average()<br>            )<br>        }<br>    }<br>}</span></pre>\n" +
                    "<p id=\"08c5\" data-selectable-paragraph=\"\">The problems with the traditional approach:</p>\n" +
                    "<ol style=\"list-style-type: none;\">\n" +
                    "  <li id=\"62ff\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Manual work &mdash; Every entity needs to be manually mapped to a DTO, which is repetitive creating more code for a good reason, but no resulting in more code to test and maintain.</li>\n" +
                    "  <li id=\"cb72\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">N+1 query problem &mdash; For each department, it will execute additional queries to fetch employees, resulting in N+1 queries.&nbsp;<em>There are other ways to avoid N+1, like using&nbsp;</em><code><em>FetchType.EAGER</em></code><em>&nbsp;on the entity mapping fields or using&nbsp;</em><code><em>@EntityGraph(attributePaths = [&ldquo;employees&rdquo;])</em></code><em>&nbsp;on the repository functions.</em></li>\n" +
                    "  <li id=\"afe7\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Memory usage &mdash; It loads all employees for each department into memory, even though we only need the count and average salary.</li>\n" +
                    "  <li id=\"17ce\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Performance &mdash; Calculating averages in-memory is less efficient than doing it in the database.</li>\n" +
                    "  <li id=\"4ac6\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Code readability and maintainability &mdash; DTOs create more code to maintain and test, making the code base a bit more complex than necessary.</li>\n" +
                    "</ol>\n" +
                    "<h1 id=\"88d7\" data-selectable-paragraph=\"\">Projections instead of DTOs</h1>\n" +
                    "<p id=\"608e\" data-selectable-paragraph=\"\">Now, let&rsquo;s define a projection that includes department details and a summary of employees:</p>\n" +
                    "<pre><span id=\"01e9\" data-selectable-paragraph=\"\">// could be named just DepartmentSummary, or DepartmentSummaryView<br>// as \"Projection\" is a quite long postfix <br>interface DepartmentSummaryProjection {<br>    val id: Long<br>    val name: String<br>    val employeeCount: Int<br>    val averageSalary: Double<br>}</span></pre>\n" +
                    "<p id=\"6507\" data-selectable-paragraph=\"\">Next, create a repository that uses this projection:</p>\n" +
                    "<pre><span id=\"d942\" data-selectable-paragraph=\"\">@Repository<br>interface DepartmentProjectionRepository : JpaRepository&lt;Department, Long&gt; {<br>    @Query(\"\"\"<br>        SELECT d.id as id, d.name as name, <br>        COUNT(e) as employeeCount, <br>        AVG(e.salary) as averageSalary<br>        FROM Department d <br>        LEFT JOIN d.employees e <br>        GROUP BY d.id, d.name<br>    \"\"\")<br>    fun findAllDepartmentSummaries(): List&lt;DepartmentSummaryProjection&gt;<br>}</span></pre>\n" +
                    "<p id=\"55ac\" data-selectable-paragraph=\"\">Benefits of using projections in this scenario:</p>\n" +
                    "<ol style=\"list-style-type: none;\">\n" +
                    "  <li id=\"f1bb\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Single query &mdash; The projection uses a single, optimized SQL query to fetch all required data.</li>\n" +
                    "  <li id=\"c388\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Reduced memory usage &mdash; Only the necessary data (id, name, count, average) is transferred from the database to the application, not entire employee lists.</li>\n" +
                    "  <li id=\"cfd6\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Database-level calculations &mdash; Averages and counts are calculated in the database, which is typically more efficient.</li>\n" +
                    "  <li id=\"c6a9\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">No manual mapping &mdash; We avoid the need to manually map entities to DTOs.</li>\n" +
                    "  <li id=\"050c\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\">Type safety &mdash; The projection interface ensures we&rsquo;re working with the correct fields.</li>\n" +
                    "</ol>\n" +
                    "<h1 id=\"0531\" data-selectable-paragraph=\"\">Making clear boundaries between Entities and Projections</h1>\n" +
                    "<p id=\"31d6\" data-selectable-paragraph=\"\">Let&rsquo;s create a clear boundary so the projection repository is only exposing the projections, never exposing the entities, like we would when extending&nbsp;<code>JpaRepository</code>. That way, we can avoid misusing of projection repositories to work with entities and provide guidance, by design, to anyone who is touching the codebase, to create projections.</p>\n" +
                    "<pre><span id=\"f1f3\" data-selectable-paragraph=\"\">import org.springframework.data.jpa.repository.Query<br>import org.springframework.data.repository.NoRepositoryBean<br>import org.springframework.data.repository.Repository<br><br>@NoRepositoryBean<br>interface ProjectionRepository &lt;T, ID&gt; : Repository&lt;T, ID&gt;<br><br>interface DepartmentProjectionRepository : ProjectionRepository&lt;Department, Long&gt; {<br>    @Query(\"\"\"<br>        SELECT d.id as id, d.name as name, <br>        COUNT(e) as employeeCount, <br>        AVG(e.salary) as averageSalary<br>        FROM Department d <br>        LEFT JOIN d.employees e <br>        GROUP BY d.id, d.name<br>    \"\"\")<br>    fun findAllDepartmentSummaries(): List&lt;DepartmentSummaryProjection&gt;<br>}</span></pre>\n" +
                    "<p id=\"7f15\" data-selectable-paragraph=\"\">Now we can start using these &ldquo;projection&rdquo; repositories in our REST API controllers and also wherever we don&rsquo;t need to work with entities.</p>\n" +
                    "<h1 id=\"12c8\" data-selectable-paragraph=\"\">Trade-offs</h1>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"c0f7\" data-selectable-paragraph=\"\">&ldquo;There are no solutions. There are only trade-offs.&rdquo;<br>― Thomas Sowell</p>\n" +
                    "</blockquote>\n" +
                    "<h2 id=\"10d7\" data-selectable-paragraph=\"\">DTOs</h2>\n" +
                    "<ul style=\"list-style-type: none;\">\n" +
                    "  <li id=\"ac9c\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Pros: Strong type safety, explicit contracts between layers</li>\n" +
                    "  <li id=\"2ff7\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Cons: More boilerplate, manual mapping required</li>\n" +
                    "</ul>\n" +
                    "<h2 id=\"5876\" data-selectable-paragraph=\"\">Projections</h2>\n" +
                    "<ul style=\"list-style-type: none;\">\n" +
                    "  <li id=\"f9c8\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Pros: Less code, direct database-to-API mapping, more efficient queries and less object creation overhead</li>\n" +
                    "  <li id=\"be86\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Cons: Weaker type safety, potential runtime errors</li>\n" +
                    "</ul>\n" +
                    "<h1 id=\"2e39\" data-selectable-paragraph=\"\">Testing implications</h1>\n" +
                    "<p id=\"fbdc\" data-selectable-paragraph=\"\">The key is to understand the trade-offs of both solutions and choose the approach that best fits your project&rsquo;s needs.</p>\n" +
                    "<p id=\"710a\" data-selectable-paragraph=\"\">Both approaches require thorough testing, but vary slightly:</p>\n" +
                    "<ul style=\"list-style-type: none;\">\n" +
                    "  <li id=\"29dc\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">For DTOs, unit tests can cover mapping logic between entities and DTOs.&nbsp;<em>Note: This might be an additional effort because if we implement custom queries in our repositories, we need to create integration tests for those as well.</em></li>\n" +
                    "  <li id=\"85c8\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">For projections, integration tests are necessary to ensure correct query execution and result mapping.</li>\n" +
                    "</ul>\n" +
                    "<p id=\"f0dd\" data-selectable-paragraph=\"\">So, no matter what approach we choose, we need to test it anyway, but it seems that projections might require less testing compared to DTOs.</p>",
            "<div>\n" +
                    "  <div>\n" +
                    "    <div>\n" +
                    "      <figure>\n" +
                    "        <div tabindex=\"0\" role=\"button\">\n" +
                    "          <div>\n" +
                    "            <picture><img style=\"width: 680px; height: auto;\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:875/0*kcNJXOc7SDPdu-ON\" alt=\"\" width=\"700\" height=\"394\" loading=\"eager\"></picture>\n" +
                    "          </div>\n" +
                    "        </div>\n" +
                    "        <figcaption data-selectable-paragraph=\"\">Photo by&nbsp;<a href=\"https://unsplash.com/@emilep?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\">Emile Perron</a>&nbsp;on&nbsp;<a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\">Unsplash</a></figcaption>\n" +
                    "      </figure>\n" +
                    "      <p id=\"34cd\" data-selectable-paragraph=\"\">In this blog post, I will introduce a dynamic approach to querying data from a database with multiple filter options.</p>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</div>\n" +
                    "<div role=\"separator\">&nbsp;</div>\n" +
                    "<div>\n" +
                    "  <div>\n" +
                    "    <div>\n" +
                    "      <h1 id=\"3bfd\" data-selectable-paragraph=\"\">Problem</h1>\n" +
                    "      <p id=\"6d73\" data-selectable-paragraph=\"\">Have you ever struggled with a method that requires passing a large number of parameters?</p>\n" +
                    "      <p id=\"fbe6\" data-selectable-paragraph=\"\">For example, consider this scenario:</p>\n" +
                    "      <p id=\"3980\" data-selectable-paragraph=\"\">We have an entity:</p>\n" +
                    "      <pre><span id=\"84d5\" data-selectable-paragraph=\"\"><br>@Data<br>@Entity<br>@FieldNameConstants<br>public class JobPost {<br><br>    @Id<br>    @GeneratedValue(strategy = GenerationType.IDENTITY)<br>    private Long id;<br><br>    private String title;<br>    private String description;<br>    private String company;<br>    private Integer type;<br>    private String url;<br>    private String companyUrl;<br>    private String companyLogo;<br>    private Timestamp createdAt;<br>    private Timestamp updatedAt;<br>    private Integer status;<br>    private Integer cityId;<br>    private Integer districtId;<br>    private Integer wardId;<br>    <br>}</span></pre>\n" +
                    "      <p id=\"71d4\" data-selectable-paragraph=\"\">Now, let&rsquo;s find a list of jobs that satisfy these conditions based on the parameters listed below:</p>\n" +
                    "      <pre><span id=\"39d9\" data-selectable-paragraph=\"\">public interface JobPostRepository extends JpaRepository&lt;JobPost, Long&gt; {<br>    List&lt;JobPost&gt; findAllByTitleLikeAndCompanyAndTypeAndCreatedAtBetweenAndCityIdAndDistrictId(String title, String company, Integer type, BatchProperties.Job job, Integer cityId, Integer districtId, Integer wardId);<br>}</span></pre>\n" +
                    "      <p id=\"19ff\" data-selectable-paragraph=\"\">What are the issues with this code:</p>\n" +
                    "      <ul style=\"list-style-type: none;\">\n" +
                    "        <li id=\"83f0\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">The method is too lengthy, especially with a list parameter.</li>\n" +
                    "        <li id=\"d094\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Each new field filter requires a new method implementation.</li>\n" +
                    "        <li id=\"d0c2\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Sometimes, you need to combine filters across random fields like title and type.</li>\n" +
                    "        <li id=\"176f\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">You want to compare only if the parameter provided is not null.</li>\n" +
                    "      </ul>\n" +
                    "      <p id=\"1642\" data-selectable-paragraph=\"\">Not to worry, Spring JPA provides an alternative approach to address all these issues called&nbsp;<strong>JPA Specification</strong>. Let&rsquo;s implement it.</p>\n" +
                    "      <h1 id=\"ca30\" data-selectable-paragraph=\"\">Implementation</h1>\n" +
                    "      <p id=\"20f0\" data-selectable-paragraph=\"\">Update the&nbsp;<code>JobPostRepository</code>&nbsp;interface to extend&nbsp;<code>JpaSpecificationExecutor</code>.</p>\n" +
                    "      <pre><span id=\"6f63\" data-selectable-paragraph=\"\">public interface JobPostRepository extends JpaRepository&lt;JobPost, Long&gt;, JpaSpecificationExecutor&lt;JobPost&gt; {<br>}</span></pre>\n" +
                    "      <p id=\"1ee7\" data-selectable-paragraph=\"\">Define a class to group all parameters.</p>\n" +
                    "      <pre><span id=\"897b\" data-selectable-paragraph=\"\">@Data<br>public class JobPostQueryParams {<br>    private String title;<br>    private String company;<br>    private Integer type;<br>    private Timestamp createdAtFrom;<br>    private Timestamp createdAtTo;<br>    private Integer status;<br>    private Integer cityId;<br>    private Integer districtId;<br>    private Integer wardId;<br><br>}</span></pre>\n" +
                    "      <p id=\"9b78\" data-selectable-paragraph=\"\">A helper class to build Specification</p>\n" +
                    "      <pre><span id=\"16b4\" data-selectable-paragraph=\"\"><br>public class JobPostSpecificationBuilder {<br>    <br>    public static Specification&lt;JobPost&gt; hasTitle(String title) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (title != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.like(root.get(JobPost.Fields.title), \"%\" + title + \"%\"));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasCompany(String company) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (company != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.like(root.get(JobPost.Fields.company), \"%\" + company + \"%\"));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasType(Integer type) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (type != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(JobPost.Fields.type), type));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasCreatedAtFrom(Timestamp createdAtFrom) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (createdAtFrom != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.greaterThanOrEqualTo(root.get(JobPost.Fields.createdAt), createdAtFrom));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasCreatedAtTo(Timestamp createdAtTo) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (createdAtTo != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.lessThanOrEqualTo(root.get(JobPost.Fields.createdAt), createdAtTo));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasStatus(Integer status) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (status != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(JobPost.Fields.status), status));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasCityId(Integer cityId) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (cityId != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(JobPost.Fields.cityId), cityId));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasDistrictId(Integer districtId) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (districtId != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(JobPost.Fields.districtId), districtId));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; hasWardId(Integer wardId) {<br>        return (root, query, criteriaBuilder) -&gt; {<br>            Predicate predicate = criteriaBuilder.conjunction();<br>            if (wardId != null) {<br>                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(root.get(JobPost.Fields.wardId), wardId));<br>            }<br>            return predicate;<br>        };<br>    }<br>    <br>    public static Specification&lt;JobPost&gt; buildSpecification(JobPostQueryParams params) {<br>        return Specification.where(<br>            hasTitle(params.getTitle())<br>            .and(hasCompany(params.getCompany()))<br>            .and(hasType(params.getType()))<br>            .and(hasCreatedAtFrom(params.getCreatedAtFrom()))<br>            .and(hasCreatedAtTo(params.getCreatedAtTo()))<br>            .and(hasStatus(params.getStatus()))<br>            .and(hasCityId(params.getCityId()))<br>            .and(hasDistrictId(params.getDistrictId()))<br>            .and(hasWardId(params.getWardId()))<br>        );<br>    }<br>   <br>}</span></pre>\n" +
                    "      <p id=\"1cc5\" data-selectable-paragraph=\"\">Now, if you want to add a new filter applied to a field such as &lsquo;description,&rsquo; you only need to:</p>\n" +
                    "      <ul style=\"list-style-type: none;\">\n" +
                    "        <li id=\"c47f\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Write a new method called&nbsp;<code>hasDescription</code>.</li>\n" +
                    "        <li id=\"ecca\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Append it to the body of the&nbsp;<code>buildSpecification</code>&nbsp;method.</li>\n" +
                    "      </ul>\n" +
                    "      <h1 id=\"bdb1\" data-selectable-paragraph=\"\">Conclusion</h1>\n" +
                    "      <p id=\"4117\" data-selectable-paragraph=\"\">Using Spring JPA Specifications, we&rsquo;ve simplified method signatures by avoiding the need for numerous parameters and created a flexible, maintainable way to build dynamic queries. This approach allows for:</p>\n" +
                    "      <ol style=\"list-style-type: none;\">\n" +
                    "        <li id=\"674d\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Simplified Method Signatures</strong>: With&nbsp;<code>JpaSpecificationExecutor</code>, we avoid creating separate methods for each filter combination.</li>\n" +
                    "        <li id=\"f8cb\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Dynamic Query Construction</strong>: The specification builder allows combining multiple filters dynamically based on runtime parameters.</li>\n" +
                    "        <li id=\"5377\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Easy Extensibility</strong>: Adding new filters is straightforward &mdash; just create a new specification method and include it in the builder.</li>\n" +
                    "      </ol>\n" +
                    "      <p id=\"c91b\" data-selectable-paragraph=\"\">This method streamlines query management, making adding or modifying filters easy without changing repository methods.</p>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</div>\n" +
                    "<div role=\"separator\">&nbsp;</div>\n" +
                    "<div>\n" +
                    "  <div>\n" +
                    "    <div>\n" +
                    "      <p id=\"7bb0\" data-selectable-paragraph=\"\">Thank you for reading! I hope this approach helps you in building more efficient and maintainable data queries in your Spring applications.</p>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</div>",
            "<p id=\"5260\" data-selectable-paragraph=\"\">Improve performance of Java Spring and JPA applications.</p>\n" +
                    "<p id=\"0a02\" data-selectable-paragraph=\"\">Computer programming is the art of writing instructions for a computer. These instructions are called &ldquo;programs.&rdquo;</p>\n" +
                    "<p id=\"9906\" data-selectable-paragraph=\"\">Computers can&rsquo;t do anything on their own. Everything a computer does is the result of programs people develop to solve problems, meet needs, or achieve goals.</p>\n" +
                    "<figure>\n" +
                    "  <div tabindex=\"0\" role=\"button\">\n" +
                    "    <div>\n" +
                    "      <picture>\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/0*FUhqU2--MH0V-jrO.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*FUhqU2--MH0V-jrO.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*FUhqU2--MH0V-jrO.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*FUhqU2--MH0V-jrO.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*FUhqU2--MH0V-jrO.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*FUhqU2--MH0V-jrO.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/0*FUhqU2--MH0V-jrO.png 1400w\" type=\"image/webp\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\">\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/0*FUhqU2--MH0V-jrO.png 640w, https://miro.medium.com/v2/resize:fit:720/0*FUhqU2--MH0V-jrO.png 720w, https://miro.medium.com/v2/resize:fit:750/0*FUhqU2--MH0V-jrO.png 750w, https://miro.medium.com/v2/resize:fit:786/0*FUhqU2--MH0V-jrO.png 786w, https://miro.medium.com/v2/resize:fit:828/0*FUhqU2--MH0V-jrO.png 828w, https://miro.medium.com/v2/resize:fit:1100/0*FUhqU2--MH0V-jrO.png 1100w, https://miro.medium.com/v2/resize:fit:1400/0*FUhqU2--MH0V-jrO.png 1400w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\" data-testid=\"og\"><img style=\"width: 680px; height: auto;\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:875/0*FUhqU2--MH0V-jrO.png\" alt=\"\" width=\"700\" height=\"351\" loading=\"eager\">\n" +
                    "      </picture>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</figure>\n" +
                    "<p id=\"03de\" data-selectable-paragraph=\"\">Modern application development is an approach that allows organizations to create and deliver applications with greater speed, flexibility, and security. It uses various technologies and processes, such as cloud-native architecture, microservices, containers, continuous integration and continuous development (CI/CD), DevOps, and artificial intelligence (AI).</p>\n" +
                    "<p id=\"70eb\" data-selectable-paragraph=\"\">Here is a table that summarizes the key differences between modern and legacy applications:</p>\n" +
                    "<figure>\n" +
                    "  <div tabindex=\"0\" role=\"button\">\n" +
                    "    <div>\n" +
                    "      <picture>\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*BdhMFQW-piAwbzMgrBt19g.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*BdhMFQW-piAwbzMgrBt19g.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*BdhMFQW-piAwbzMgrBt19g.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*BdhMFQW-piAwbzMgrBt19g.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*BdhMFQW-piAwbzMgrBt19g.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*BdhMFQW-piAwbzMgrBt19g.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*BdhMFQW-piAwbzMgrBt19g.png 1400w\" type=\"image/webp\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\">\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/1*BdhMFQW-piAwbzMgrBt19g.png 640w, https://miro.medium.com/v2/resize:fit:720/1*BdhMFQW-piAwbzMgrBt19g.png 720w, https://miro.medium.com/v2/resize:fit:750/1*BdhMFQW-piAwbzMgrBt19g.png 750w, https://miro.medium.com/v2/resize:fit:786/1*BdhMFQW-piAwbzMgrBt19g.png 786w, https://miro.medium.com/v2/resize:fit:828/1*BdhMFQW-piAwbzMgrBt19g.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*BdhMFQW-piAwbzMgrBt19g.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*BdhMFQW-piAwbzMgrBt19g.png 1400w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\" data-testid=\"og\"><img style=\"width: 680px; height: auto;\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:875/1*BdhMFQW-piAwbzMgrBt19g.png\" alt=\"\" width=\"700\" height=\"301\" loading=\"lazy\">\n" +
                    "      </picture>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</figure>\n" +
                    "<h1 id=\"bd5e\" data-selectable-paragraph=\"\">Security and Performance</h1>\n" +
                    "<p id=\"50b7\" data-selectable-paragraph=\"\">Security and performance are indeed crucial aspects of any application, and they are often interconnected. Let&rsquo;s delve into each aspect individually and then explore their relationship with examples:</p>\n" +
                    "<h2 id=\"5e90\" data-selectable-paragraph=\"\">Security:</h2>\n" +
                    "<ol style=\"list-style-type: none;\">\n" +
                    "  <li id=\"016b\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Data Protection</strong>: Security measures must be in place to protect sensitive data from unauthorized access, modification, or disclosure. This includes implementing encryption for data at rest and in transit.</li>\n" +
                    "  <li id=\"0783\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Authentication and Authorization</strong>: Proper authentication ensures that only authorized users can access the application, while authorization controls what actions users can perform within the application.</li>\n" +
                    "  <li id=\"df8b\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Prevention of Injection Attacks</strong>: Applications must sanitize user input to prevent injection attacks such as SQL injection, XSS (Cross-Site Scripting), and CSRF (Cross-Site Request Forgery).</li>\n" +
                    "  <li id=\"13f7\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Session Management</strong>: Secure session management techniques should be employed to prevent session hijacking and fixation attacks.</li>\n" +
                    "  <li id=\"1a68\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Secure Communication</strong>: Applications should use secure communication protocols (e.g., HTTPS) to protect data exchanged between clients and servers.</li>\n" +
                    "  <li id=\"b1d9\" style=\"list-style-type: decimal;\" data-selectable-paragraph=\"\"><strong>Security Headers</strong>: Utilize security headers like Content Security Policy (CSP), HTTP Strict Transport Security (HSTS), and X-Content-Type-Options to enhance security and mitigate common web vulnerabilities.</li>\n" +
                    "</ol>\n" +
                    "<h2 id=\"d6d6\" data-selectable-paragraph=\"\">Performance:</h2>",
            "<h1 id=\"7322\" data-selectable-paragraph=\"\">Transaction Boundaries</h1>\n" +
                    "<p id=\"a157\" data-selectable-paragraph=\"\">While working with relational SQL Databases, like SQL Server, we often take advantage of one of their most useful features:&nbsp;<strong>Transactions</strong>. They give us confidence that when we update multiple rows across multiple tables at the same time, the database will either apply all the changes or none, leaving our data in a consistent, expected state.</p>\n" +
                    "<p id=\"4b62\" data-selectable-paragraph=\"\">Let&rsquo;s take a look at an example Java Spring service method that needs to update values in two tables in one process:</p>\n" +
                    "<pre><span id=\"45aa\" data-selectable-paragraph=\"\">public void updateUserDetails(Customer customer, CustomerDetails details) {<br>    updateCustomer(customer, details);<br>    createCustomerHistoryEntry(customer, details);<br>} </span></pre>\n" +
                    "<p id=\"74e8\" data-selectable-paragraph=\"\">This code will update a row in the customer table and also introduce a new row in a customer history table. If run without a transaction context, the change will not be atomic. In case of a problem, there is a possibility that the customer will be updated but the history entry will not be stored, leaving our database in an inconsistent state.</p>\n" +
                    "<p id=\"55ee\" data-selectable-paragraph=\"\">To run these operations in a transaction, we simply add a&nbsp;<code>@Transactional</code>&nbsp;annotation on the method:</p>\n" +
                    "<pre><span id=\"20f4\" data-selectable-paragraph=\"\">@Transactional<br>public void updateUserDetails(Customer customer, CustomerDetails details) {<br>    updateCustomer(customer, details);<br>    createCustomerHistoryEntry(customer, details);<br>}</span></pre>\n" +
                    "<p id=\"2144\" data-selectable-paragraph=\"\">Now both operations will run in a single transaction, ensuring that both changes will be applied atomically to the database, all or nothing.</p>\n" +
                    "<p id=\"ab44\" data-selectable-paragraph=\"\">What often happens during ongoing projects is that we might need to extend this process with additional operations. For example, we might need to verify the customer with a KYC (know your customer) process, which requires a request to an external or internal service with a REST method. So, what is the easiest solution?</p>\n" +
                    "<pre><span id=\"c05e\" data-selectable-paragraph=\"\">@Transactional<br>public void updateUserDetails(Customer customer, CustomerDetails details) {<br>    updateCustomer(customer, details);<br>    createCustomerHistoryEntry(customer, details);<br>    verifyCustomerWithKYC(customer, details);<br>}</span></pre>\n" +
                    "<p id=\"5f81\" data-selectable-paragraph=\"\">Let&rsquo;s try to understand the consequences of such a change.</p>\n" +
                    "<p id=\"1f2f\" data-selectable-paragraph=\"\">In order for the method to run the operations inside a transaction, it needs to fetch a database connection from the connection pool and start the transaction. The connection is active and considered taken; no other process can use it at this time. The connection is returned to the pool once the transaction is committed or rolled back. By default, the database connection pool is rather small. With Spring Boot and HikariCP, it is set to 10 max connections.</p>\n" +
                    "<p id=\"19c2\" data-selectable-paragraph=\"\">So, what can be a problem with adding such a method? Let&rsquo;s prepare some test applications and run some benchmarks!</p>\n" +
                    "<h1 id=\"adb5\" data-selectable-paragraph=\"\">Benchmarks</h1>\n" +
                    "<p id=\"4b58\" data-selectable-paragraph=\"\">We will run our tests against an application that will at first only update the customer row in the table without making any requests to another service.</p>\n" +
                    "<figure>\n" +
                    "  <div tabindex=\"0\" role=\"button\">\n" +
                    "    <div>\n" +
                    "      <picture>\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*Ju6QZQho0BiztV3elWS77A.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*Ju6QZQho0BiztV3elWS77A.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*Ju6QZQho0BiztV3elWS77A.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*Ju6QZQho0BiztV3elWS77A.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*Ju6QZQho0BiztV3elWS77A.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*Ju6QZQho0BiztV3elWS77A.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Ju6QZQho0BiztV3elWS77A.png 1400w\" type=\"image/webp\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\">\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/1*Ju6QZQho0BiztV3elWS77A.png 640w, https://miro.medium.com/v2/resize:fit:720/1*Ju6QZQho0BiztV3elWS77A.png 720w, https://miro.medium.com/v2/resize:fit:750/1*Ju6QZQho0BiztV3elWS77A.png 750w, https://miro.medium.com/v2/resize:fit:786/1*Ju6QZQho0BiztV3elWS77A.png 786w, https://miro.medium.com/v2/resize:fit:828/1*Ju6QZQho0BiztV3elWS77A.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*Ju6QZQho0BiztV3elWS77A.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*Ju6QZQho0BiztV3elWS77A.png 1400w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\" data-testid=\"og\"><img style=\"width: 680px; height: auto;\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:875/1*Ju6QZQho0BiztV3elWS77A.png\" alt=\"\" width=\"700\" height=\"227\" loading=\"lazy\">\n" +
                    "      </picture>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</figure>\n" +
                    "<p id=\"1100\" data-selectable-paragraph=\"\">We will use the Gatling tool for running our benchmarks. It will call our service with 10 active threads for 10 seconds. We will measure the effectiveness with a transactions per second metric, t/s.</p>\n" +
                    "<p id=\"3158\" data-selectable-paragraph=\"\">Our starting setup:</p>\n" +
                    "<ul style=\"list-style-type: none;\">\n" +
                    "  <li id=\"6fb7\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">HikariCP database connection pool set to 5</li>\n" +
                    "  <li id=\"ea18\" style=\"list-style-type: disc;\" data-selectable-paragraph=\"\">Gatling with 5 threads</li>\n" +
                    "</ul>\n" +
                    "<p id=\"2203\" data-selectable-paragraph=\"\">Running the benchmark, we get these results:</p>",
            "<p id=\"2e65\" data-selectable-paragraph=\"\">As I believe we are struggling with learning the terms, a step-by-step approach is beneficial, given that we are having difficulty understanding them.</p>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"81e4\" data-selectable-paragraph=\"\"><strong><em>What is JPA?</em></strong></p>\n" +
                    "</blockquote>\n" +
                    "<p id=\"ebc9\" data-selectable-paragraph=\"\"><mark>JPA, which stands for Java Persistence API, is not a tool or framework on its own; instead, it provides a set of concepts and guidelines that directly implements how to manage relational data in Java applications. Metadata annotations are provided by JPA in order to define a mapping between objects and relational databases.</mark></p>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"a0ab\" data-selectable-paragraph=\"\"><strong><em>What is annotation?</em></strong></p>\n" +
                    "</blockquote>\n" +
                    "<p id=\"84e2\" data-selectable-paragraph=\"\">Annotation is supplemental info about the program. Developers use annotations to inform JPA.</p>\n" +
                    "<h1 id=\"dc32\" data-selectable-paragraph=\"\"><strong><em>JPA Annotations</em></strong></h1>\n" +
                    "<p id=\"ed67\" data-selectable-paragraph=\"\">JPA annotations are used in mapping from Java objects to the database tables. Hibernate is the most popular ORM library that uses JPA specifications and provides some additional annotations. Annotations can be added to source code and allowed to be retained by the JVM at run-time.</p>\n" +
                    "<h1 id=\"db46\" data-selectable-paragraph=\"\">SOME MAPPING ANNOTATIONS</h1>\n" +
                    "<figure>\n" +
                    "  <div tabindex=\"0\" role=\"button\">\n" +
                    "    <div>\n" +
                    "      <picture>\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 1400w\" type=\"image/webp\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\">\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/1*Z91sIw81eeIsjEnLEtseaQ.jpeg 1400w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\" data-testid=\"og\"><img style=\"width: 680px; height: auto;\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:875/1*Z91sIw81eeIsjEnLEtseaQ.jpeg\" alt=\"\" width=\"700\" height=\"484\" loading=\"lazy\">\n" +
                    "      </picture>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</figure>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"8a03\" data-selectable-paragraph=\"\"><em>Let&rsquo;s take a look at some annotations with examples.</em></p>\n" +
                    "</blockquote>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"1c6d\" data-selectable-paragraph=\"\"><strong><em>@ Entity</em></strong></p>\n" +
                    "</blockquote>\n" +
                    "<p id=\"19f8\" data-selectable-paragraph=\"\">Specifies that the class is an entity. This annotation can be applied to Class, Interface of Enums.</p>\n" +
                    "<figure>\n" +
                    "  <div tabindex=\"0\" role=\"button\">\n" +
                    "    <div>\n" +
                    "      <picture>\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/format:webp/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 1400w\" type=\"image/webp\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\">\n" +
                    "        <source srcset=\"https://miro.medium.com/v2/resize:fit:640/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/1*HwBZowOVM4G2TBodHs1Aaw.jpeg 1400w\" sizes=\"(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px\" data-testid=\"og\"><img style=\"width: 680px; height: auto;\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:875/1*HwBZowOVM4G2TBodHs1Aaw.jpeg\" alt=\"\" width=\"700\" height=\"310\" loading=\"lazy\">\n" +
                    "      </picture>\n" +
                    "    </div>\n" +
                    "  </div>\n" +
                    "</figure>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"1dd1\" data-selectable-paragraph=\"\"><strong><em>@ Table</em></strong></p>\n" +
                    "</blockquote>\n" +
                    "<p id=\"3e1b\" data-selectable-paragraph=\"\">It is used to specify the table name. In the example above the data will be stored in the &ldquo;users&rdquo; table.</p>\n" +
                    "<blockquote>\n" +
                    "  <p id=\"8bf2\" data-selectable-paragraph=\"\"><strong><em>@ Column</em></strong></p>\n" +
                    "</blockquote>\n" +
                    "<p id=\"2846\" data-selectable-paragraph=\"\">This annotation is used to define the column name of the table.</p>\n" +
                    "<figure>\n" +
                    "  <div tabindex=\"0\" role=\"button\">&nbsp;</div>\n" +
                    "</figure>"
    );
}
